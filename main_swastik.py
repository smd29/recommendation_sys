# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17wElrU0uBsYRYrEfm0m41y4x_W-f2Okd
"""

# # from math import sqrt
import random
# # import matching_similarity
# import user_preference_data
# import word_similarity
# import itertools
import csv
import numpy as np
import pandas as pd

# from google.colab import files
# uploaded=files.upload()

user_id = []
price = []
location = []
size = []
flat_type = []
flat_id = []

f = open(r"C:\Users\nEW u\Desktop\Recommendation system\Implementation\DataSet\rating.csv")
csv_f = csv.reader(f)
price=[]
location=[]
mode_of_sharing=[]
flat_type=[]

for column in csv_f:
  price.append(column[1])
  location.append(column[2])
  mode_of_sharing.append(column[3])
  flat_type.append(column[4])
  
print(price)
print(location)
print(mode_of_sharing)
print(flat_type)

price.remove('Price')
location.remove('Location')
mode_of_sharing.remove('Mode_of_Sharing')
flat_type.remove('Flat_type')

existing_users_rating=[]
for i in range(0,100):
  existing_users_rating.append([price[i],location[i],mode_of_sharing[i],flat_type[i]])

print(existing_users_rating)

new_user_rating = []
for i in range(0,4):
  new_user_rating.append(random.randint(0,5))
  
print(new_user_rating)

euclidean_dist=[]
user_id=[]
for idx,val in enumerate(existing_users_rating):
  dist = np.linalg.norm(np.array(pd.to_numeric(existing_users_rating[idx]))- np.array(pd.to_numeric(new_user_rating)))
  euclidean_dist.append(dist)
  user_id.append(idx)

print(euclidean_dist)

mean=np.mean(euclidean_dist)

similar_user=[]
user_idx=0
for dist in euclidean_dist:
  user_idx=user_idx+1
  if(dist<mean):
    similar_user.append(user_idx)

print(similar_user)

sorted_user_list = []

sorted_sim_user_list = [i[0] for i in sorted(enumerate(euclidean_dist), key=lambda x: x[1])]
for idx in range(len(sorted_sim_user_list)):
    if(euclidean_dist[sorted_sim_user_list[idx]]<mean):
        sorted_user_list.append(sorted_sim_user_list[idx])
    
    
    
print("\nThe most similar(sorted) user profiles are: "+str(sorted_user_list))

top_ten_sim_user_list = sorted_sim_user_list[:10]
print(top_ten_sim_user_list)

f = open(r"C:\Users\nEW u\Desktop\Recommendation system\Implementation\DataSet\Assigned_houses.csv")
csv_f = csv.reader(f)
user=[]
location_assigned=[]
price_assigned=[]
size_assigned=[]
flat_type_assigned=[]
flat_id_assigned=[]

for column in csv_f:
  user.append(column[0])
  location_assigned.append(column[1])
  price_assigned.append(column[2])
  size_assigned.append(column[3])
  flat_type_assigned.append(column[4])
  flat_id_assigned.append(column[5])

print(user)
print(location_assigned)
print(price_assigned)
print(size_assigned)
print(flat_type_assigned)
print(flat_id_assigned)

user.remove('User')
location_assigned.remove('Location ')
price_assigned.remove('Price')
size_assigned.remove('Size')
flat_type_assigned.remove('type')
flat_id_assigned.remove('Flat id')

print(user)
print(location_assigned)
print(price_assigned)
print(size_assigned)
print(flat_type_assigned)
print(flat_id_assigned)

existing_users_flats=[]
for i in range(0,100):
  existing_users_flats.append([price_assigned[i],location_assigned[i],size_assigned[i],flat_type_assigned[i],flat_id_assigned[i]])

print(existing_users_flats)

location = ['Amanora Park Town', 'Magarpatta City', 'Hadapsar', 'Mundhwa']
flat_type = ['1BHK', '2BHK', '3BHK', '4BHK']
flat_furnishing = ['Unfurnished', 'Semi-Furnished', 'Furnished']
new_user_pref = []

new_user_pref.append(random.randint(7000,150000))
new_user_location=random.sample(location,1)
new_user_type=random.sample(flat_type,1)
new_user_furnishing= random.sample(flat_furnishing,1)
print(new_user_location)

new_user_pref.append(new_user_location[0])
new_user_pref.append(new_user_type[0])
new_user_pref.append(new_user_furnishing[0])

print(new_user_pref)

recommended=[]
recommended_flat=[]
for i in range(0,4):
  most_imp=max(new_user_rating)
  idx=new_user_rating.index(most_imp)
  if(idx==0):
      
       if(recommended==[]):
          for flats in top_ten_sim_user_list:
            recommended_flat=existing_users_flats[flats]
            if(pd.to_numeric(new_user_pref[idx])>pd.to_numeric(recommended_flat[idx])):
          
              recommended.append(recommended)
     
  else:
     for flats in top_ten_sim_user_list:
        recommended_flat=existing_users_flats[flats]
        if(pd.to_numeric(new_user_pref[idx])<pd.to_numeric(recommended_flat[idx])):
          recommended.remove(recommended_flat)
    
    
  if(idx==1):
      
      for flats in top_ten_sim_user_list:
        recommended_flat=existing_users_flats[flats]
        if(recommended==[]):
          for flats in top_ten_sim_user_list:
            recommended_flat=existing_users_flats[flats]
            if(new_user_pref[idx]==recommended_flat[idx]):
          
              recommended.append(recommended)
     
    
  else:
      for flats in top_ten_sim_user_list:
        recommended_flat=existing_users_flats[flats]
        if(new_user_pref[idx]!=recommended_flat[idx]):
          recommended.remove(recommended_flat)
     
    
  if(idx==2):
     
      if(recommended==[]):
         for flats in top_ten_sim_user_list:
          recommended_flat=existing_users_flats[flats]
          if(new_user_pref[idx]==recommended_flat[idx]):
            recommended.append(recommended)
             
          
           
     
    
  else:
       for flats in top_ten_sim_user_list:
          recommended_flat=existing_users_flats[flats]
          if(new_user_pref[idx]!=recommended_flat[idx]):
            recommended.remove(recommended_flat)
            
     
  if(idx==3):
      
        if(recommended==[]):
          for flats in top_ten_sim_user_list:
            recommended_flat=existing_users_flats[flats]
            if(new_user_pref[idx]==recommended_flat[idx]):
                recommended.append(recommended)

          
        
    
  else:
      for flats in top_ten_sim_user_list:
        recommended_flat=existing_users_flats[flats]
        if(new_user_pref[idx]==recommended_flat[idx]):
          recommended.remove(recommended_flat)
    
new_user_rating[idx]=0

print(recommended)

